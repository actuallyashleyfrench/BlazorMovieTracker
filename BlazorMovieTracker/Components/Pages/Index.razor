@page "/"
@inject BlazorMovieTracker.Services.MovieService MovieService
@inject NavigationManager Nav
@using BlazorMovieTracker.Models
@rendermode InteractiveServer

<PageTitle>Movies</PageTitle>

<h1 class="mt-3 ms-3 mb-3">🎬 Movies</h1>


<div class="container mt-4">
    <div class="d-flex justify-content-end mb-3">
        <input @bind="searchTerm" @bind:event="oninput" placeholder="Search title..." class="form-control w-50 me-3" />
        <a class="btn btn-primary" href="/add-movie">+ Add Movie</a>
    </div>



    @if (filteredMovies == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!filteredMovies.Any())
    {
        <p>No movies found.</p>
    }
    else
    {
        <!-- Movie Table -->
        <div class="card mt-4"> 
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th @onclick="@(() => SortBy("Title"))" style="cursor: pointer;">
                            Title @SortIndicator("Title")
                        </th>
                        <th @onclick="@(() => SortBy("Genre"))" style="cursor: pointer;">
                            Genre @SortIndicator("Genre")
                        </th>
                        <th @onclick="@(() => SortBy("Watched"))" style="cursor: pointer;">
                            Watched @SortIndicator("Watched")
                        </th>
                        <th></th>
                    </tr>
                </thead>


                <tbody>
                    @foreach (var movie in filteredMovies)
                    {
                        <!-- Row is clickable to navigate to details page -->
                        <tr @onclick="() => NavigateToDetails(movie.Id)" style="cursor: pointer;">
                            <td>@movie.Title</td>
                            <td>@movie.Genre</td>
                            <td>@(movie.Watched ? "✅" : "❌")</td>
                            <td>
                                <a href="/edit-movie/@movie.Id" class="btn btn-sm btn-secondary me-2" @onclick:stopPropagation>✏️Edit</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Movie>? allMovies;
    private List<Movie>? filteredMovies;

    private string sortColumn = string.Empty;
    private bool sortAscending = true;

    // Search term bound to search input
    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            if (allMovies != null)
            {
                FilterMovies();
            }
        }
    }

    // Load all movies
    protected override async Task OnInitializedAsync()
    {
        allMovies = await MovieService.GetAllAsync();
        FilterMovies();
    }

    // Handle column sorting logic - toggle if same column clicked again
    private void SortBy(string column)
    {
        if (filteredMovies == null || !filteredMovies.Any())
            return;

        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        FilterMovies();
    }

    // Display arrow indicator for sorted column
    private MarkupString SortIndicator(string column)
    {
        if (sortColumn != column) return (MarkupString)string.Empty;
        return (MarkupString)(sortAscending ? "▲" : "▼");
    }

    // Filter and sort movies based on search and sort input
    private void FilterMovies()
    {
        filteredMovies = allMovies ?? new List<Movie>();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredMovies = filteredMovies
                .Where(m => m.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrEmpty(sortColumn))
        {
            filteredMovies = sortColumn switch
            {
                "Title" => sortAscending
                    ? filteredMovies.OrderBy(m => m.Title).ToList()
                    : filteredMovies.OrderByDescending(m => m.Title).ToList(),

                "Genre" => sortAscending
                    ? filteredMovies.OrderBy(m => m.Genre).ToList()
                    : filteredMovies.OrderByDescending(m => m.Genre).ToList(),

                "Watched" => sortAscending
                    ? filteredMovies.OrderByDescending(m => m.Watched).ToList()
                    : filteredMovies.OrderBy(m => m.Watched).ToList(),

                _ => filteredMovies
            };
        }
    }

    // Navigate to movie details page
    void NavigateToDetails(int id)
    {
        Nav.NavigateTo($"movie-details/{id}");
    }
}



